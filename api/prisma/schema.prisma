// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String?
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@index([ptype, v0, v1, v2, v3, v4, v5])
}

model UserRole {
  id     Int     @id @default(autoincrement())
  userId String // The user's ID
  role   String // The assigned role name
  scope  String? // The scope: specific userId or "*" for all
}

// Enum untuk menentukan tipe kategori
enum CategoryType {
  NEWS
  ARTICLE
  INFO
  DOCUMENT
  EVENT
  ATTACHMENT
}

enum Status {
  DRAFT
  PUBLISHED
  INACTIVE
  DELETED
}

model Category {
  id        String            @id @default(uuid())
  name      String
  slug      String            @unique
  type      CategoryType
  author    String
  status    Status            @default(DRAFT)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  news      News[]            @relation("NewsCategories")
  articles  Article[]         @relation("ArticleCategories")
  infos     Info[]            @relation("InfoCategories")
  documents CompanyDocument[] @relation("DocumentCategories")
  events    Event[]           @relation("EventCategories")

  @@unique([name, type]) // Composite unique constraint
}

model Photo {
  id         String             @id @default(uuid())
  url        String
  author     String
  status     Status             @default(DRAFT)
  news       News?              @relation(fields: [newsId], references: [id])
  newsId     String?
  article    Article?           @relation(fields: [articleId], references: [id])
  articleId  String?
  info       Info?              @relation(fields: [infoId], references: [id])
  infoId     String?
  document   CompanyDocument?   @relation(fields: [documentId], references: [id])
  documentId String?
  event      Event?             @relation(fields: [eventId], references: [id])
  eventId    String?
  mercury    MercuryMonitoring? @relation(fields: [mercuryId], references: [id]) // New relation
  mercuryId  String? // Foreign key for MercuryMonitoring
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @default(now())
}

model News {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String?
  description String? // TinyMCE HTML content
  views       Int        @default(0)
  author      String
  status      Status     @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  categories  Category[] @relation("NewsCategories")
  photos      Photo[]
}

model Event {
  id          String       @id @default(uuid())
  title       String
  slug        String       @unique
  description String
  startDate   DateTime
  endDate     DateTime
  latitude    Float
  longitude   Float
  city        String?
  province    String?
  country     String?
  createdById String
  author      String
  status      Status       @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Category[]   @relation("EventCategories")
  photos      Photo[]
  attachments Attachment[]
}

model Article {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String
  description String? // TinyMCE HTML content
  views       Int        @default(0)
  author      String
  status      Status     @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  categories  Category[] @relation("ArticleCategories")
  photos      Photo[]
}

model Info {
  id          String     @id @default(uuid())
  title       String
  createdById String
  slug        String     @unique
  description String?
  views       Int        @default(0)
  author      String
  status      Status     @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("InfoCategories")
  photos      Photo[]
}

model CompanyDocument {
  id          String       @id @default(uuid())
  title       String
  slug        String       @unique
  documentUrl String
  description String? // TinyMCE HTML content
  author      String
  status      Status       @default(DRAFT)
  views       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById String
  categories  Category[]   @relation("DocumentCategories")
  photos      Photo[]
  attachments Attachment[]
}

model Attachment {
  id                String           @id @default(uuid())
  documentUrl       String // URL of the uploaded document
  documentPath      String // Path to the document in the filesystem
  companyDocument   CompanyDocument? @relation(fields: [companyDocumentId], references: [id])
  event             Event?           @relation(fields: [eventId], references: [id])
  author            String
  status            Status           @default(DRAFT)
  companyDocumentId String?
  eventId           String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model SearchMetric {
  id           String       @id @default(uuid())
  userId       String? // nullable if anonymous search
  keyword      String? // search keyword
  categoryName String[] // Category name instead of ID
  type         CategoryType // NEWS, ARTICLE, EVENT, etc.
  timestamp    DateTime     @default(now())
}

model ContentViewLog {
  id          String   @id @default(uuid())
  contentId   String // ID of the content being viewed
  contentType String // Can be 'news', 'article', 'info', or 'companyDocument'
  viewedAt    DateTime @default(now()) // Timestamp when the content is viewed
}

model MercuryMonitoring {
  id String @id @default(uuid())

  jenisSampelId String? // Foreign key for the sample type 'Jenis Sampel'
  jenisSampel   JenisSample? @relation("JenisSampelRelation", fields: [jenisSampelId], references: [id])

  bakuMutuLingkunganId String? // Foreign key for the sample type 'Baku Mutu Lingkungan'
  bakuMutuLingkungan   JenisSample? @relation("BakuMutuLingkunganRelation", fields: [bakuMutuLingkunganId], references: [id])

  tahunPengambilan DateTime // Sample collection date
  hasilKadar       String   @db.VarChar(10) // Mercury content result
  satuan           String   @db.VarChar(10)
  tingkatKadar     String   @db.VarChar(50) // Mercury level compared to BML
  konsentrasi      String   @db.VarChar(50) // Mercury concentration

  peskLocationId String?   @unique // Ensure one-to-one relation with unique key
  peskLocation   Location? @relation("PeskLocation", fields: [peskLocationId], references: [id])

  warehouseLocationId String?   @unique // Ensure one-to-one relation with unique key
  warehouseLocation   Location? @relation("WarehouseLocation", fields: [warehouseLocationId], references: [id])

  photos Photo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JenisSample {
  id              String          @id @default(uuid())
  code            String
  deskripsi       String
  typeId          String // Foreign key to JenisSampel
  jenisSampelType JenisSampleType @relation(fields: [typeId], references: [id])

  mercuryJenisSampel        MercuryMonitoring[] @relation("JenisSampelRelation")
  mercuryBakuMutuLingkungan MercuryMonitoring[] @relation("BakuMutuLingkunganRelation")

  @@unique([code, typeId]) // Ensure uniqueness for code and type combination
}

model Location {
  id          String  @id @default(uuid())
  latitude    Float
  longitude   Float
  description String? @db.VarChar(255)

  // Relations for the hierarchical structure
  provinceId String? // Foreign key to Province
  province   Province? @relation(fields: [provinceId], references: [id])

  regencyId String?
  regency   Regencies? @relation(fields: [regencyId], references: [id])

  districtId String?
  district   Districts? @relation(fields: [districtId], references: [id])

  villageId String?
  village   Village? @relation(fields: [villageId], references: [id])

  mercuryPesk      MercuryMonitoring? @relation("PeskLocation")
  mercuryWarehouse MercuryMonitoring? @relation("WarehouseLocation")
}

model JenisSampleType {
  id        String   @id @default(uuid())
  type      String   @unique
  deskripsi String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  JenisSample JenisSample[]
}

model Province {
  id        String       @id @default(uuid()) @db.Char(2) // Province ID (2 characters)
  name      String       @db.VarChar(255) // Province name
  regencies Regencies[]  // Relation to regencies
  cities City[]

  @@map("reg_provinces") // Maps to the existing table "reg_provinces"
  Location  Location[]
  LocationDetails LocationDetails[]
  DataSupplier DataSupplier[]
  DataCustomer DataCustomer[]
  DataTransporter DataTransporter[]
  PerusahaanAsalMuat PerusahaanAsalMuat[]
  PerusahaanTujuanBongkar PerusahaanTujuanBongkar[]
  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]
  DataPerusahaanAsalMuatOnPengakutanDetailFinal DataPerusahaanAsalMuatOnPengakutanDetailFinal[]
  DataPerusahaanTujuanBongkarOnPengakutanDetailFinal DataPerusahaanTujuanBongkarOnPengakutanDetailFinal[]
}

model Regencies {
  id         String      @id @default(uuid())
  name       String      @db.VarChar(255) // Regency name
  provinceId String      @db.Char(250) // Foreign key to Province
  province   Province    @relation(fields: [provinceId], references: [id]) // Relation to Province
  districts  Districts[] // Relation to villages

  @@map("reg_regencies") // Maps to the existing table "reg_regencies"
  Location Location[]
  users    User[]
  LocationDetails LocationDetails[]
  DataSupplier DataSupplier[]
  DataCustomer DataCustomer[]
  DataTransporter DataTransporter[]
  PerusahaanAsalMuat PerusahaanAsalMuat[]
  PerusahaanTujuanBongkar PerusahaanTujuanBongkar[]
  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]
  DataPerusahaanAsalMuatOnPengakutanDetailFinal DataPerusahaanAsalMuatOnPengakutanDetailFinal[]
  DataPerusahaanTujuanBongkarOnPengakutanDetailFinal DataPerusahaanTujuanBongkarOnPengakutanDetailFinal[]
}

model Districts {
  id        String     @id @default(uuid())
  name      String     @db.VarChar(255) // Village name
  regencyId String     @db.Char(250) // Foreign key to Regencies
  regency   Regencies  @relation(fields: [regencyId], references: [id]) // Relation to Regencies
  villages  Village[] // Relation to villages
  Location  Location[]

  @@map("reg_districts") // Maps to the existing table "req_districts"
  LocationDetails LocationDetails[]
  DataSupplier DataSupplier[]
  DataCustomer DataCustomer[]
  DataTransporter DataTransporter[]
  PerusahaanAsalMuat PerusahaanAsalMuat[]
  PerusahaanTujuanBongkar PerusahaanTujuanBongkar[]
  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]
  DataPerusahaanAsalMuatOnPengakutanDetailFinal DataPerusahaanAsalMuatOnPengakutanDetailFinal[]
  DataPerusahaanTujuanBongkarOnPengakutanDetailFinal DataPerusahaanTujuanBongkarOnPengakutanDetailFinal[]
}

model Village {
  id         String     @id @default(uuid())
  name       String     @db.VarChar(255) // Village name
  districtId String     @db.Char(250) // Foreign key to Regencies
  district   Districts  @relation(fields: [districtId], references: [id]) // Relation to Regencies
  Location   Location[]

  @@map("reg_village") // Maps to the existing table "reg_villages"
  LocationDetails LocationDetails[]
  DataSupplier DataSupplier[]
  DataCustomer DataCustomer[]
  DataTransporter DataTransporter[]
  PerusahaanAsalMuat PerusahaanAsalMuat[]
  PerusahaanTujuanBongkar PerusahaanTujuanBongkar[]
  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]
  DataPerusahaanAsalMuatOnPengakutanDetailFinal DataPerusahaanAsalMuatOnPengakutanDetailFinal[]
  DataPerusahaanTujuanBongkarOnPengakutanDetailFinal DataPerusahaanTujuanBongkarOnPengakutanDetailFinal[]
}

model Company {
  id              String        @id @default(uuid())
  name            String        @unique // Name should be unique
  penanggungJawab String
  alamatKantor    String
  telpKantor      String
  skalaPerusahaan String?
  faxKantor       String? // Optional fax number
  emailKantor     String? // Optional email address
  npwp            String?       @unique // Optional NPWP (Tax ID)
  nomorInduk      String?       @unique // Optional Nomor Induk (Registration Number)
  kodeDBKlh       String?       @unique // Optional Kode DB KLH
  alamatPool      String[] // Array of optional pool addresses
  bidangUsaha     String? // Optional business sector
  vehicles        Vehicle[] // One-to-many relationship: A company can have multiple vehicles
  applications    Application[] // One-to-many: A company can submit multiple applications
  registrasi      Registrasi[] // One-to-many: A company can have multiple registration sk
  tipePerusahaan  String[] // Tipe perusahaan
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  IdentitasApplication IdentitasApplication[]
  notifikasi           Notifikasi[]

  PerusahaanTujuanBongkar PerusahaanTujuanBongkar[]

  PerusahaanAsalMuat PerusahaanAsalMuat[]

  PelaporanPengangkutan PelaporanPengangkutan[]

  LaporanPengangkutanFinal LaporanPengangkutanFinal[]

  TelaahTeknisRekomendasiB3 TelaahTeknisRekomendasiB3[]

  PenyimpananB3 PenyimpananB3[]

  DataBahanB3Company DataBahanB3Company[]

  PelaporanPenggunaanBahanB3 PelaporanPenggunaanBahanB3[]

  DataSupplier DataSupplier[]

  PelaporanB3Dihasilkan PelaporanB3Dihasilkan[]

  StokB3AddRequest StokB3AddRequest[]

  DataCustomer DataCustomer[]

  PelaporanPenggunaanBahanB3Final PelaporanPenggunaanBahanB3Final[]

  PelaporanB3DihasilkanFinal PelaporanB3DihasilkanFinal[]

  DataTransporter DataTransporter[]

  PelaporanBahanB3Distribusi PelaporanBahanB3Distribusi[]

  PelaporanBahanB3DistribusiFinal PelaporanBahanB3DistribusiFinal[]

  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]

  DataPerusahaanAsalMuatOnPengakutanDetailFinal DataPerusahaanAsalMuatOnPengakutanDetailFinal[]

  DataPerusahaanTujuanBongkarOnPengakutanDetailFinal DataPerusahaanTujuanBongkarOnPengakutanDetailFinal[]
}

model Vehicle {
  id             String                 @id @default(uuid())
  noPolisi       String                 @unique
  modelKendaraan String
  tahunPembuatan Int
  nomorRangka    String
  nomorMesin     String
  kepemilikan    String
  companyId      String
  company        Company                @relation(fields: [companyId], references: [id])
  applications   ApplicationOnVehicle[] // Many-to-many relation with Application

  deletedAt DateTime? // Soft delete flag (NULL = active)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  PelaporanPengangkutan PelaporanPengangkutan[]
}

model IdentitasApplication {
  id             String        @id @default(uuid())
  namaPemohon    String
  jabatan        String
  alamatDomisili String
  teleponFax     String
  email          String
  npwp           String? // Tambahkan NPWP jika diperlukan
  ktp            String? // Tambahkan KTP jika diperlukan
  application    Application[] // One-to-many relationship with Application
  company        Company       @relation(fields: [companyId], references: [id])
  companyId      String // Foreign key to connect with Company

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Application {
  id                      String                     @id @default(uuid())
  kodePermohonan          String                     @unique // Unique application code
  status                  String // Current status of the application
  jenisPermohonan         String // Type of application
  tipeSurat               String // Type of surat
  tanggalPengajuan        DateTime // Date when the application was submitted
  tanggalDisetujui        DateTime? // Optional date for approval
  tanggalBerakhir         DateTime? // Optional expiration date
  companyId               String // Foreign key for Company
  company                 Company                    @relation(fields: [companyId], references: [id])
  identitasPemohonId      String? // Foreign key for IdentitasPemohon
  identitasPemohon        IdentitasApplication?      @relation(fields: [identitasPemohonId], references: [id])
  vehicles                ApplicationOnVehicle[] // Many-to-many relation with vehicles
  documents               DocumentRekomendasiB3[] // One-to-many relation for uploaded documents
  requiredDocumentsStatus Json // JSON field to track the status of required document types
  draftSurat              DraftSurat? // Relation to DraftSurat (one-to-one)
  finalSurat              FinalSurat? // Relation to FinalSurat (one-to-one)
  b3Substances            B3Substance[] // One-to-many relation for B3 substances
  deletedAt               DateTime? // Soft delete flag (NULL = active)
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  statusHistory           ApplicationStatusHistory[] // Relation to status history

  PelaporanPengangkutan PelaporanPengangkutan[]
  LaporanPengangkutanFinal LaporanPengangkutanFinal[]
  TelaahTeknisRekomendasiB3 TelaahTeknisRekomendasiB3[]
}

model ApplicationStatusHistory {
  id            String      @id @default(uuid())
  applicationId String // Foreign key for Application
  application   Application @relation(fields: [applicationId], references: [id])
  oldStatus     String? // Enum or string to track the old status
  newStatus     String // Enum or string to track the new status
  changedAt     DateTime    @default(now()) // Timestamp of the status change
  changedBy     String? // Optional field to track the user who changed the status
}

model ApplicationOnVehicle {
  applicationId String
  vehicleId     String
  application   Application @relation(fields: [applicationId], references: [id])
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])

  @@id([applicationId, vehicleId]) // Composite primary key for Application and Vehicle relation
}

model B3Substance {
  id                     String            @id @default(uuid())
  dataBahanB3Id          String // Foreign key for DataBahanB3
  dataBahanB3            DataBahanB3       @relation(fields: [dataBahanB3Id], references: [id])
  b3pp74                 Boolean // Whether it is listed in B3 PP 74/2001
  b3DiluarList           Boolean // Whether it is outside the list of B3 PP 74/2001
  karakteristikB3        String // Characteristics of the B3 (e.g., korosif, mudah menyala)
  fasaB3                 String // Phase of the B3 (e.g., cair, padat)
  jenisKemasan           String // Packaging type (e.g., tangki berlapis)
  // Fixed separate one-to-many relationships with relation names
  asalMuatLocations      LocationDetails[] @relation("AsalMuatRelation") // One-to-many forasalMuat
  tujuanBongkarLocations LocationDetails[] @relation("TujuanBongkarRelation") // One-to-many fortujuanBongkar
  tujuanPenggunaan       String // Purpose of the B3 (e.g., Mengatur PH air Limbah Industri)
  applicationId          String // Foreign key to the Application model
  application            Application       @relation(fields: [applicationId], references: [id])
  registrasiId           String? // Foreign key to the Registrasi sk model
  registrasi             Registrasi?       @relation(fields: [registrasiId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PengangkutanDetail PengangkutanDetail[]
  LaporanPengangkutanFinalDetail LaporanPengangkutanFinalDetail[]
}

model DocumentRekomendasiB3 {
  id              String      @id @default(uuid())
  fileName        String // Original file name
  documentType    String // Type of the document (e.g., Surat Rekomendasi B3)
  fileUrl         String // URL for the uploaded document
  isValid         Boolean? // To mark if the document is valid after admin validation
  validationNotes String? // Admin notes on the document validation
  applicationId   String // Foreign key for Application
  application     Application @relation(fields: [applicationId], references: [id])
  isArchived      Boolean     @default(false) // Archive old document version
  isValidTelaah   Boolean? // To mark if the document is valid after technical review
  telaahNotes    String? // Notes from the technical review
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DraftSurat {
  id            String         @id @default(uuid())
  nomorSurat    String? // Nullable
  tanggalSurat  DateTime? // Nullable
  tipeSurat     String // NOT NULL, wajib diisi
  kodeDBKlh     String? // Nullable
  pejabatId     String? // Nullable, foreign key for Pejabat
  pejabat       DataPejabat?   @relation(fields: [pejabatId], references: [id]) // Nullable relation
  applicationId String?        @unique // Foreign key for Application (one-to-one relation)
  application   Application?   @relation(fields: [applicationId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  PermohonanRekomendasiTembusan PermohonanRekomendasiTembusan[]
}

model FinalSurat {
  id           String   @id @default(uuid())
  nomorSurat   String // Unique surat number
  tanggalSurat DateTime // Date when the final surat was created

  // Many-to-many relation with DataTembusan (implicit join table will be created)
  tembusan DataTembusan[]

  pejabatId String // Foreign key for Pejabat
  pejabat   DataPejabat @relation(fields: [pejabatId], references: [id])

  applicationId String      @unique // Foreign key for Application (one-to-one relation)
  application   Application @relation(fields: [applicationId], references: [id])

  signedByDirector Boolean @default(false) // Whether the surat has been signed by the director
  signatureUrl     String? // URL to the director's signature image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DataBahanB3 {
  id             String   @id @default(uuid())
  casNumber      String   @db.Citext
  namaBahanKimia String
  namaDagang     String   @db.Citext
  tipeBahan      String // Store enum as string
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  B3Substance        B3Substance[] // One-to-many relation with B3Substance
  Notifikasi         Notifikasi[]
  BaseSuratNotfikasi BaseSuratNotfikasi[]

  @@unique([casNumber, namaDagang]) // Compound unique constraint
  DataBahanB3Company DataBahanB3Company[]
  PelaporanPenggunaanBahanB3 PelaporanPenggunaanBahanB3[]
  PelaporanB3Dihasilkan PelaporanB3Dihasilkan[]
  StokB3AddRequest StokB3AddRequest[]
  PelaporanPenggunaanBahanB3Final PelaporanPenggunaanBahanB3Final[]
  PelaporanB3DihasilkanFinal PelaporanB3DihasilkanFinal[]
  PelaporanBahanB3Distribusi PelaporanBahanB3Distribusi[]
  PelaporanBahanB3DistribusiFinal PelaporanBahanB3DistribusiFinal[]
}

model DataPejabat {
  id        String   @id @default(uuid())
  nip       String   @unique @db.Citext // Case-insensitive unique constraint
  nama      String
  jabatan   String
  status    String // Store enum as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-many relations with DraftSurat and FinalSurat
  DraftSurat           DraftSurat[]
  FinalSurat           FinalSurat[]
  DraftSuratNotifikasi BaseSuratNotfikasi[]
  TelaahTeknisPejabat TelaahTeknisPejabat[]
}

model DataTembusan {
  id        String   @id @default(uuid())
  nama      String   @unique @db.Citext // Case-insensitive unique constraint
  tipe      String // Store enum as string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  FinalSurat           FinalSurat[]
  Registrasi           Registrasi[]
  NotifikasiTembusan   NotifikasiTembusan[]
  PermohonanRekomendasiTembusan PermohonanRekomendasiTembusan[]
}

model Notifikasi {
  id                     String                    @id @default(uuid())
  companyId              String // Foreign key for Company
  company                Company                   @relation(fields: [companyId], references: [id])
  status                 String
  notes                  String? // Optional notes for the notifikasi
  tanggalDiterima        DateTime // Date when the notifikasi was received
  tanggalSelesai         DateTime? // Date when the notifikasi was done
  tanggalPerubahan       DateTime                  @default(now()) // Timestamp of the status change
  referenceNumber        String? @unique// EU reference number for the chemical
  negaraAsal             String? // Country of origin for the chemical
  dataBahanB3Id          String? // Foreign key for DataBahanB3
  dataBahanB3            DataBahanB3?              @relation(fields: [dataBahanB3Id], references: [id])
  statusHistory          NotifikasiStatusHistory[] // Relation to status history
  draftSuratNotifikasiId BaseSuratNotfikasi[] // Foreign key for DraftSuratNotifikasi
  createdById            String? // Foreign key for User
  User                   User? @relation(fields: [createdById], references: [id])
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt
  exceedsThreshold       Boolean                   @default(false) // New field to track if the process exceeds 30 days
}

model NotifikasiStatusHistory {
  id               String     @id @default(uuid())
  notifikasiId     String // Foreign key for Application
  notifikasi       Notifikasi @relation(fields: [notifikasiId], references: [id])
  notes            String? // Optional notes for the status change
  oldStatus        String? // Enum or string to track the old status
  tanggalPerubahan DateTime   @default(now()) // Timestamp of the status change
  newStatus        String // Enum or string to track the new status
  changedAt        DateTime   @default(now()) // Timestamp of the status change

  changedBy        String? // Optional field to track the user who changed the status
  User             User? @relation(fields: [changedBy], references: [id])
}

model BaseSuratNotfikasi {
  id                           String              @id @default(uuid())
  nomorSurat                   String? // Nomor surat for either type
  tanggalSurat                 DateTime? // Tanggal surat
  tipeSurat                    String // Could be 'Kebenaran Import' or 'Persetujuan Import' or 'Explicit Consent'
  kodeDBKlh                    String? // Kode DBKLH, if applicable
  sifatSurat                   String? // Sifat surat, e.g., 'Biasa'
  emailPenerima                String? // Email penerima
  tanggalPengiriman            DateTime? // Tanggal pengiriman
  pejabatId                    String? // Foreign key for Pejabat
  pejabat                      DataPejabat?        @relation(fields: [pejabatId], references: [id])
  notifikasiId                 String? // Foreign key for Notifikasi
  notifikasi                   Notifikasi?         @relation(fields: [notifikasiId], references: [id])
  referenceNumber              String? // EU reference number for the chemical
  negaraAsal                   String? // Country of origin for the chemical
  namaPengirimNotifikasi       String? // Email pengirim
  perusaahaanAsal   String? // Perusahaan pengirim
  dataBahanB3Id     String? // Foreign key for DataBahanB3
  dataBahanB3       DataBahanB3?        @relation(fields: [dataBahanB3Id], references: [id])
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  printed           Boolean             @default(false) // Flag to track if the surat has been printed
  printedAt         DateTime? // Tanggal cetak surat
  PersetujuanImport PersetujuanImport[]
  KebenaranImport   KebenaranImport[]
  ExplicitConsent   ExplicitConsent[]
  NotifikasiTembusan NotifikasiTembusan[]
}

model PersetujuanImport {
  id               String             @id @default(uuid())
  baseSuratId      String // Foreign key for BaseSurat
  baseSurat        BaseSuratNotfikasi @relation(fields: [baseSuratId], references: [id])
  validitasSurat   DateTime? // Surat validity date
  echaSpecificData String? // Data specific to ECHA, if applicable (e.g., Regulation 649/2012)\
  // Custom points for Persetujuan Import ECHA
  point1           String? // Custom Point 1 for ECHA
  point2           String? // Custom Point 2 for ECHA
  point3           String? // Custom Point 3 for ECHA
  point4           String? // Custom Point 4 for ECHA
  regulation       String? // Regulation for the import
  nomorSuratKebenaranImport String? // Nomor surat kebenaran import
  tanggalKebenaranImport DateTime? // Tanggal kebenaran import
  nomorSuratPerusahaanPengimpor String? // Nomor surat perusahaan pengimpor
  tanggalDiterimaKebenaranImport DateTime? // Tanggal diterima kebenaran import
  nomorSuratExplicitConsent  String? // Nomor surat explicit consent
  tanggalSuratExplicitConsent DateTime? // Tanggal surat explicit consent
  
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  PDFHeader PDFHeader[]
}

model Registrasi {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  companyId String // foreign key company
  company   Company? @relation(fields: [companyId], references: [id])

  nomor                  String
  tahun                  Int
  status_izin            String
  keterangan_sk          String
  tanggal_terbit         DateTime
  berlaku_dari           DateTime
  berlaku_sampai         DateTime
  nomor_notifikasi_impor String
  kode_db_klh_perusahaan String
  nama_perusahaan        String
  alamat_perusahaan      String
  status                 String
  is_draft               Boolean        @default(true)
  approved_by            String         @default("")
  approval_status        String         @default("created")
  no_reg_bahanb3         String?
  // Implicit many-to-many relations with Tembusan and bahanB3
  tembusan               DataTembusan[]
  B3Substance            B3Substance[]
  persyaratan            Persyaratan[]
}

model ExplicitConsent {
  id                   String             @id @default(uuid())
  baseSuratId          String // Foreign key for BaseSuratNotifikasi
  baseSurat            BaseSuratNotfikasi @relation(fields: [baseSuratId], references: [id])
  validitasSurat       DateTime? // Surat validity date
  jenisExplicitConsent String? // Type of Explicit Consent (e.g., 'Excha, Non Echa')
  // Custom points for Explicit Consent
  point1               String? // Custom point for Explicit Consent (related to exporter)
  point2               String? // Custom point for Explicit Consent (regulatory basis)
  point3               String? // Custom point for Explicit Consent (procedural completion)
  point4               String? // Custom point for Explicit Consent (final instructions)

  // Newly added fields
  namaExporter           String? // Name of the exporter
  namaImpoter            String? // Name of the importer
  tujuanPenggunaan       String? // Purpose of the chemical
  tujuanImport           String? // Destination of the import
  tujuanSurat            String? // Additional information
  negaraAsal             String? // Country of origin
  pdfHeaderId            String? // Foreign key for PDFHeader
  pdfHeader              PDFHeader?               @relation(fields: [pdfHeaderId], references: [id]) // Relation to PDFHeader
  // Relation to multiple sections (page content)
  ExplicitConsentDetails ExplicitConsentDetails[] // Relation to ExplicitConsentSection
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
}

model KebenaranImport {
  id                        String             @id @default(uuid())
  baseSuratId               String // Foreign key for BaseSurat
  baseSurat                 BaseSuratNotfikasi @relation(fields: [baseSuratId], references: [id])
  tanggalMaksimalPengiriman DateTime? // Max delivery date
  // Specific fields for Kebenaran Import
  point1                    String? // Custom point for Kebenaran Import
  point2                    String? // Custom point for Kebenaran Import
  point3                    String? // Custom point for Kebenaran Import

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PDFHeader PDFHeader[]
}

model PDFHeader {
  id           String   @id @default(uuid())
  header       String? // Custom header content (e.g., Kementerian details)
  subHeader    String? // Subheader content
  alamatHeader String? // Address for the header
  telp         String? // Telephone number
  fax          String? // Fax number
  kotakPos     String? // PO Box
  status       String   @default("Active") // Status of the header ('active', 'inactive')
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relation to ExplicitConsent or other documents
  explicitConsents   ExplicitConsent[]
  persetujuanImports PersetujuanImport[]
  kebenaranImports   KebenaranImport[]
}

model ExplicitConsentDetails {
  id                String          @id @default(uuid())
  explicitConsentId String // Foreign key for ExplicitConsent
  explicitConsent   ExplicitConsent @relation(fields: [explicitConsentId], references: [id])

  // Section 1A - Chemical Identity (Substance)
  nameOfChemicalSubstance String? // Name of the chemical (if in form of substance)
  casNumberSubstance      String? // CAS No. for the chemical (if in form of substance)

  // Section 1B - Chemical Identity (Preparation)
  nameOfPreparation           String? // Name of the preparation
  nameOfChemicalInPreparation String? // Name of the chemical in preparation
  concentrationInPreparation  String? // % concentration of the chemical in preparation
  casNumberPreparation        String? // CAS No. for the chemical in preparation

  // Section 2 - Response to the Request for Explicit Consent
  consentToImport Boolean? // Indicates whether the consent is given to import (Yes/No)

  // Section 3 - Use Categories
  useCategoryPesticide  Boolean? // Pesticide use (Yes/No)
  useCategoryIndustrial Boolean? // Industrial use (Yes/No)

  // Section 4 - Wider Consent for Preparations
  consentForOtherPreparations Boolean? // Is consent valid for other preparations (Yes/No)
  allowedConcentrations       String? // Concentrations allowed for other preparations
  consentForPureSubstance     Boolean? // Does consent extend to pure substance (Yes/No)

  // Section 5 - Restrictions/Conditions
  hasRestrictions    Boolean? // Are there restrictions or conditions (Yes/No)
  restrictionDetails String? // Details of restrictions or conditions

  // Section 6 - Time Limit
  isTimeLimited    Boolean? // Is the consent time-limited (Yes/No)
  timeLimitDetails DateTime? // Date until the consent is valid

  // Section 7 - Same Treatment for Domestic and Imported Chemicals
  sameTreatment             Boolean? // Is chemical from all sources treated the same as imported chemicals (Yes/No)
  differentTreatmentDetails String? // Details if chemicals are treated differently

  // Section 8 - Any Other Relevant Information
  otherRelevantInformation String? // Other relevant information provided

  // Section 9 - Name and Address of Importing DNA
  dnaInstitutionName    String? // Name of the DNA institution
  dnaInstitutionAddress String? // Address of the DNA institution
  dnaContactName        String? // Contact name at DNA institution
  dnaTelephone          String? // Telephone of the DNA institution
  dnaTelefax            String? // Telefax of the DNA institution
  dnaEmail              String[] // Email address of the DNA institution
  dnaDate               DateTime? // Date of the DNA section

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LocationDetails {
  id     String @id @default(uuid())
  name   String // Name of the company or entity
  alamat String // Address

  // Relations for the hierarchical structure
  provinceId String? // Foreign key to Province
  province   Province? @relation(fields: [provinceId], references: [id])

  regencyId String? // Foreign key to Regencies
  regency   Regencies? @relation(fields: [regencyId], references: [id])

  districtId String? // Foreign key to Districts
  district   Districts? @relation(fields: [districtId], references: [id])

  villageId String? // Foreign key to Village
  village   Village? @relation(fields: [villageId], references: [id])
  // New longitude and latitude fields to store pin point location
  longitude Float // Longitude of the location
  latitude  Float // Latitude of the location

  // Foreign key to B3Substance for AsalMuat relation with unique constraint name
  b3SubstanceIdAsalMuat String?
  b3SubstanceAsalMuat   B3Substance? @relation("AsalMuatRelation", fields: [b3SubstanceIdAsalMuat], references: [id], map: "AsalMuatForeignKey")

  // Foreign key to B3Substance for TujuanBongkar relation with unique constraint name
  b3SubstanceIdTujuanBongkar String?
  b3SubstanceTujuanBongkar   B3Substance? @relation("TujuanBongkarRelation", fields: [b3SubstanceIdTujuanBongkar], references: [id], map: "TujuanBongkarForeignKey")

  locationType String // Enum to distinguish type of location (either asalMuat or tujuanBongkar)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PelaporanPengangkutan {
  id                  String               @id @default(uuid())
  applicationId       String // Foreign key to Application (permohonan)
  application         Application          @relation(fields: [applicationId], references: [id])
  companyId           String // Foreign key to Company
  company             Company              @relation(fields: [companyId], references: [id])
  vehicleId           String // Foreign key to Vehicle
  vehicle             Vehicle              @relation(fields: [vehicleId], references: [id]) // Relation to track reports per vehicle
  bulan               Int // Month of the report (1 for January, 2 for February, etc.)
  tahun               Int // Year of the report
  pengangkutanDetails PengangkutanDetail[] // One-to-many relation to PengangkutanDetail
  periodId            String // Foreign key to Period
  period              Period               @relation(fields: [periodId], references: [id])
  
  isDraft            Boolean    @default(true)
  isFinalized        Boolean    @default(false)
  isApproved         Boolean    @default(false)

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([vehicleId, bulan, tahun]) // Ensures each vehicle is reported only once per month and year
}

model PengangkutanDetail {
  id                      String                    @id @default(uuid())
  pelaporanPengangkutanId String // Foreign key to PelaporanPengangkutan
  pelaporanPengangkutan   PelaporanPengangkutan     @relation(fields: [pelaporanPengangkutanId], references: [id])
  b3SubstanceId           String // Foreign key to B3Substance
  b3Substance             B3Substance               @relation(fields: [b3SubstanceId], references: [id]) // Relation to B3Substance to get name, CAS number, etc.
  jumlahB3                Float? // Amount of B3 transported (kg)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt

    
  isDraft            Boolean    @default(true)
  isFinalized        Boolean    @default(false)
  isApproved         Boolean    @default(false)

  @@unique([b3SubstanceId, pelaporanPengangkutanId]) // Ensures each B3 substance is reported only once per month and year
  DataPerusahaanAsalMuatOnPengakutanDetail DataPerusahaanAsalMuatOnPengakutanDetail[]
  DataPerusahaanTujuanBongkarOnPengakutanDetail DataPerusahaanTujuanBongkarOnPengakutanDetail[]
}

model PerusahaanAsalMuat {
  id                   String             @id @default(uuid())
  companyId            String // Foreign key to Company
  company              Company            @relation(fields: [companyId], references: [id])
  namaPerusahaan       String // Name of the loading company
  alamat               String // Loading origin address
  latitude             Float // Loading origin latitude
  longitude            Float // Loading origin longitude
  locationType         String // Type of location: Gudang or Pelabuhan
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])

  DataPerusahaanAsalMuatOnPengakutanDetail DataPerusahaanAsalMuatOnPengakutanDetail[]
}

model PerusahaanTujuanBongkar {
  id                   String             @id @default(uuid())
  companyId            String // Foreign key to Company
  company              Company            @relation(fields: [companyId], references: [id])
  namaPerusahaan       String // Name of the unloading company
  alamat               String // Unloading destination address
  latitude             Float // Unloading destination latitude
  longitude            Float // Unloading destination longitude
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  DataPerusahaanTujuanBongkarOnPengakutanDetail DataPerusahaanTujuanBongkarOnPengakutanDetail[]
}

model Period {
  id                   String   @id @default(uuid())
  name                 String // Name of the period, e.g., "Q1 2024"
  startDate            DateTime // Start of the reporting period
  endDate              DateTime // End of the reporting period
  finalizationDeadline DateTime // Deadline for finalizing reports in this period
  isActive             Boolean  @default(false) // Only one active period allowed
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  pelaporanPengangkutans PelaporanPengangkutan[]

  PelaporanPenggunaanBahanB3 PelaporanPenggunaanBahanB3[]

  PelaporanB3Dihasilkan PelaporanB3Dihasilkan[]

  PelaporanPenggunaanBahanB3Final PelaporanPenggunaanBahanB3Final[]

  PelaporanB3DihasilkanFinal PelaporanB3DihasilkanFinal[]

  PelaporanBahanB3Distribusi PelaporanBahanB3Distribusi[]

  PelaporanBahanB3DistribusiFinal PelaporanBahanB3DistribusiFinal[]
}

model Persyaratan {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  document_number String
  path            String
  notes           String   @db.Text
  status          String   @default("dibuat")
  approved_by     String?

  registrasiId String?
  registrasi   Registrasi? @relation(fields: [registrasiId], references: [id])
}

model City {
  id         String   @id @default(uuid())
  name       String
  provinceId String
  province   Province @relation(fields: [provinceId], references: [id])
}

model User {
  id          String @id @default(uuid())
  email       String @unique
  phoneNumber String @unique
  fullName   String
  password    String
  salt        String
  refreshToken String?  // Nullable field for storing the refresh token
  address     String @db.Text
  cityId      String
  provinceId  String
  regency       Regencies   @relation(fields: [cityId], references: [id])
  idNumber    String // no KTP
   idPhotoUrl  String?
  resetPassword ResetPassword[]

   NotifikasiStatusHistory NotifikasiStatusHistory[]

   Notifikasi Notifikasi[]

   TelaahTeknisDocumentNotesRekomendasiB3 TelaahTeknisDocumentNotesRekomendasiB3[]

   Approval Approval[]
}

model ResetPassword {
  id        String   @id @default(uuid())
  userId    String
  token     String
  expiredAt DateTime
  used      Boolean  @default(false)
  user User @relation(fields: [userId], references: [id])
}

model Secret {
  clientId    String @id
  clientSecret String
}

model LaporanPengangkutanFinal {
  id                      String                     @id @default(uuid())
  applicationId           String                     // Referensi ke Application (Permohonan)
  application             Application                @relation(fields: [applicationId], references: [id])
  perusahaanId            String                     // Referensi ke Company
  perusahaan              Company                    @relation(fields: [perusahaanId], references: [id])
  bulan                   Int                        // Bulan laporan
  tahun                   Int                        // Tahun laporan
  finalisasiPada          DateTime                   @default(now()) // Waktu finalisasi laporan
  totalJumlahB3           Float                      // Total semua jenis B3 yang diangkut
  jenisB3Details          LaporanPengangkutanFinalDetail[] // Relasi ke detail jenis B3

  @@unique([applicationId, perusahaanId, bulan, tahun]) // Memastikan satu laporan per application, company, bulan, dan tahun
}

model LaporanPengangkutanFinalDetail {
  id                      String                 @id @default(uuid())
  laporanPengangkutanFinalId String              // Referensi ke LaporanPengangkutanFinal
  laporanPengangkutanFinal LaporanPengangkutanFinal @relation(fields: [laporanPengangkutanFinalId], references: [id])
  b3SubstanceId           String                 // Referensi ke B3Substance
  b3Substance             B3Substance            @relation(fields: [b3SubstanceId], references: [id])
  jumlahB3                Float                  // Jumlah total untuk jenis B3 ini

  @@unique([laporanPengangkutanFinalId, b3SubstanceId]) // Memastikan satu record per jenis B3 di setiap laporan final
  DataPerusahaanAsalMuatOnPengakutanDetailFinal DataPerusahaanAsalMuatOnPengakutanDetailFinal[]
  DataPerusahaanTujuanBongkarOnPengakutanDetailFinal DataPerusahaanTujuanBongkarOnPengakutanDetailFinal[]

}

model TelaahTeknisRekomendasiB3{
  id String @id @default(uuid())
  applicationId String @unique
  application Application @relation(fields: [applicationId], references: [id])
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  printed Boolean @default(false)
  notes String?
  kronologi_permohonan String[]
  lain_lain String[]
  tindak_lanjut String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TelaahTeknisDocumentNotesRekomendasiB3 TelaahTeknisDocumentNotesRekomendasiB3[]

  TelaahTeknisPejabat TelaahTeknisPejabat[]
}

model TelaahTeknisDocumentNotesRekomendasiB3 {
  id                          String  @id @default(uuid())
  telaahTeknisRekomendasiB3Id String
  telaahTeknisRekomendasiB3   TelaahTeknisRekomendasiB3 @relation(fields: [telaahTeknisRekomendasiB3Id], references: [id])
  tipeDokumen                 String
  isValid                     Boolean @default(false)
  notes                       String?
  changedBy                   String? // Optional field to track the user who changed the status
  User                        User? @relation(fields: [changedBy], references: [id])

  @@unique([telaahTeknisRekomendasiB3Id, tipeDokumen]) // Composite unique constraint
}

model PenyimpananB3 {
  id                    String      @id @default(uuid())
  alamatGudang          String
  longitude             Float
  latitude              Float
  luasArea              Float
  companyId             String
  isApproved            Boolean?
  approvedAt            DateTime?
  status                String
  
  company               Company     @relation(fields: [companyId], references: [id])
  approval              Approval?   @relation(fields: [approvedById], references: [id])
  approvedById          String?

  PenyimpananB3Persyaratan PenyimpananB3Persyaratan[]
}

model PenyimpananB3Persyaratan{
  id String @id @default(uuid())
  
  tipeDokumen           String
  notes                 String?

  isApproved            Boolean?
  approval              Approval?   @relation(fields: [approvedById], references: [id])
  approvedById          String?
  penyimpananB3Id       String?
  penyimpananB3 PenyimpananB3? @relation(fields: [penyimpananB3Id], references: [id])

  photosPenyimpananB3 PhotoPenyimpananB3[]
}


model PhotoPenyimpananB3 {
  id                    String      @id @default(uuid())
  fileUrl               String
  originalFileName      String
  fileName              String
  penyimpananB3PersyaratanId       String
  penyimpananB3Persyaratan PenyimpananB3Persyaratan @relation(fields: [penyimpananB3PersyaratanId], references: [id])
}

model Approval {
  id                    String      @id @default(uuid())
  approvedById          String
  approvedAt            DateTime
  approvedBy            User?        @relation(fields: [approvedById], references: [id])

  penyimpananB3Approval PenyimpananB3[]

  PenyimpananB3Persyaratan PenyimpananB3Persyaratan[]

  StokB3UpdateRequest StokB3UpdateRequest[]

  StokB3AddRequest StokB3AddRequest[]
}

model TelaahTeknisPejabat {
  id                       String               @id @default(uuid())
  telaahTeknisId           String
  dataPejabatId            String
  index                    Int                  // Index of pejabat in the array

  TelaahTeknisRekomendasiB3 TelaahTeknisRekomendasiB3 @relation(fields: [telaahTeknisId], references: [id])
  DataPejabat              DataPejabat          @relation(fields: [dataPejabatId], references: [id])

  @@unique([telaahTeknisId, dataPejabatId])    // Ensure uniqueness for each relation
}

model PermohonanRekomendasiTembusan {
  id                       String               @id @default(uuid())
  draftSuratId           String
  dataTembusanId            String
  index                    Int                  // Index of pejabat in the array

  DraftSurat DraftSurat @relation(fields: [draftSuratId], references: [id])
  DataTembusan              DataTembusan          @relation(fields: [dataTembusanId], references: [id])

  @@unique([draftSuratId, dataTembusanId])    // Ensure uniqueness for each relation
}

model NotifikasiTembusan {
  id                       String               @id @default(uuid())
  baseSuratNotifikasiId           String
  dataTembusanId            String
  index                    Int                  // Index of pejabat in the array

  BaseSuratNotifikasi BaseSuratNotfikasi @relation(fields: [baseSuratNotifikasiId], references: [id])
  DataTembusan              DataTembusan          @relation(fields: [dataTembusanId], references: [id])

  @@unique([baseSuratNotifikasiId, dataTembusanId])    // Ensure uniqueness for each relation
}

model DataBahanB3Company {
  id             String        @id @default(uuid())
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
  dataBahanB3Id  String
  dataBahanB3    DataBahanB3   @relation(fields: [dataBahanB3Id], references: [id])
  stokB3         Float

  stokHistory    StokB3History[]
  updateRequests StokB3UpdateRequest[]
}

model StokB3History {
  id                    String      @id @default(uuid())
  dataBahanB3CompanyId  String
  dataBahanB3Company    DataBahanB3Company @relation(fields: [dataBahanB3CompanyId], references: [id])
  previousStokB3        Float
  newStokB3             Float
  changeDate            DateTime    @default(now())
}

model StokB3UpdateRequest {
  id                    String      @id @default(uuid())
  dataBahanB3CompanyId  String
  dataBahanB3Company    DataBahanB3Company @relation(fields: [dataBahanB3CompanyId], references: [id])
  requestedStokB3       Float
  requestDate           DateTime    @default(now())
  approved              Boolean     @default(false)
  approvalId            String?
  approval              Approval?   @relation(fields: [approvalId], references: [id])
}

model StokB3AddRequest {
  id                    String      @id @default(uuid())
  companyId      String
  company        Company       @relation(fields: [companyId], references: [id])
  dataBahanB3Id  String
  dataBahanB3    DataBahanB3   @relation(fields: [dataBahanB3Id], references: [id])
  requestedStokB3       Float
  requestDate           DateTime    @default(now())
  approved              Boolean     @default(false)
  approvalId            String?
  approval              Approval?   @relation(fields: [approvalId], references: [id])
}

model DataSupplier {
  id String @id @default(uuid())
  namaSupplier String
  alamat String
  email String?
  telepon String?
  fax String?
  longitude Float?
  latitude Float?
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  DataPic DataPIC[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DataSupplierOnPelaporanPenggunaanB3 DataSupplierOnPelaporanPenggunaanB3[]
}

model PelaporanB3Dihasilkan{
  id String @id @default(uuid())
  tipeProduk String //B3 atau Non B3
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  periodId String
  period Period @relation(fields: [periodId], references: [id])
  bulan Int
  tahun Int
  prosesProduksi String?
  dataBahanB3Id String?
  dataBahanB3 DataBahanB3? @relation(fields: [dataBahanB3Id], references: [id])
  jumlahB3Dihasilkan Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  isDraft            Boolean    @default(true)
  isFinalized        Boolean    @default(false)
  isApproved         Boolean    @default(false)

  PelaporanB3DihasilkanHistory PelaporanB3DihasilkanHistory[]

  @@unique([companyId, dataBahanB3Id, bulan, tahun])
}

model PelaporanB3DihasilkanHistory {
  id                        String   @id @default(uuid())
  pelaporanB3DihasilkanId   String
  pelaporanB3Dihasilkan     PelaporanB3Dihasilkan @relation(fields: [pelaporanB3DihasilkanId], references: [id])

  statusPengajuan           String // Enum untuk status pengajuan
  tanggalPengajuan          DateTime
  tanggalPenyelesaian       DateTime?
  catatanAdmin              String?

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model PelaporanB3DihasilkanFinal {
  id                 String     @id @default(uuid())
  tipeProduk         String     // B3 atau Non B3
  companyId          String
  company            Company    @relation(fields: [companyId], references: [id])
  periodId           String
  period             Period     @relation(fields: [periodId], references: [id])
  bulan              Int
  tahun              Int
  namaProduk         String?
  prosesProduksi     String?
  dataBahanB3Id      String?
  dataBahanB3        DataBahanB3? @relation(fields: [dataBahanB3Id], references: [id])
  jumlahB3Dihasilkan Float
  approvedAt         DateTime   // Waktu saat laporan disetujui

  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  @@unique([companyId, dataBahanB3Id, bulan, tahun])
}

model DataCustomer {
  id String @id @default(uuid())
  namaCustomer String
  alamat String
  email String
  telepon String
  fax String?
  longitude Float
  latitude Float
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])
  DataPic DataPIC[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DataCustomerOnPelaporanDistribusiBahanB3 DataCustomerOnPelaporanDistribusiBahanB3[]
}

model DataPIC {
  id String @id @default(uuid())
  namaPIC String?
  jabatan String?
  email String?
  telepon String?
  fax String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DataCustomer DataCustomer[]

  DataSupplier DataSupplier[]

  DataTransporter DataTransporter[]
}

model PelaporanPenggunaanBahanB3 {
  id                  String               @id @default(uuid())
  companyId           String // Foreign key to Company
  company             Company              @relation(fields: [companyId], references: [id])
  
  bulan               Int // Month of the report (1 for January, 2 for February, etc.)
  tahun               Int // Year of the report
  dataBahanB3Id       String // Foreign key to DataBahanB3
  dataBahanB3         DataBahanB3          @relation(fields: [dataBahanB3Id], references: [id]) // Relation to track reports per B3 substance
  periodId            String // Foreign key to Period
  period              Period               @relation(fields: [periodId], references: [id])
  tipePembelian       String // Type of purchase (e.g., 'Import', 'Local')
  jumlahPembelianB3  Float // Amount of B3 purchased (kg)
  jumlahB3Digunakan   Float // Amount of B3 used (kg)

  isDraft            Boolean    @default(true)
  isFinalized        Boolean    @default(false)
  isApproved         Boolean    @default(false)

  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([dataBahanB3Id, bulan, tahun]) // Ensures each vehicle is reported only once per month and year
  DataSupplierOnPelaporanPenggunaanB3 DataSupplierOnPelaporanPenggunaanB3[]
  PelaporanPenggunaanBahanB3History PelaporanPenggunaanBahanB3History[]
}

model DataSupplierOnPelaporanPenggunaanB3{
  id String @id @default(uuid())
  pelaporanPenggunaanB3Id String
  pelaporanPenggunaanB3 PelaporanPenggunaanBahanB3 @relation(fields: [pelaporanPenggunaanB3Id], references: [id])
  dataSupplierId String
  dataSupplier DataSupplier @relation(fields: [dataSupplierId], references: [id])
}

model PelaporanPenggunaanBahanB3Final {
  id                  String               @id @default(uuid())
  companyId           String // Foreign key to Company
  company             Company              @relation(fields: [companyId], references: [id])

  bulan               Int // Month of the report (1 for January, 2 for February, etc.)
  tahun               Int // Year of the report
  dataBahanB3Id       String // Foreign key to DataBahanB3
  dataBahanB3         DataBahanB3          @relation(fields: [dataBahanB3Id], references: [id])
  periodId            String // Foreign key to Period
  period              Period               @relation(fields: [periodId], references: [id])
  tipePembelian       String // Type of purchase (e.g., 'Import', 'Local')
  jumlahPembelianB3   Float // Amount of B3 purchased (kg)
  jumlahB3Digunakan   Float // Amount of B3 used (kg)
  approvedAt          DateTime // The date when the report was approved
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relation to DataSupplierOnPelaporanPenggunaanB3Final
  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]

  @@unique([dataBahanB3Id, bulan, tahun]) // Ensures each B3 substance is reported only once per month and year
}

model DataSupplierOnPelaporanPenggunaanB3Final {
  id                       String @id @default(uuid())
  pelaporanPenggunaanB3FinalId String
  pelaporanPenggunaanB3Final   PelaporanPenggunaanBahanB3Final @relation(fields: [pelaporanPenggunaanB3FinalId], references: [id])
  namaSupplier String
  alamat String
  email String?
  telepon String?
  fax String?
  longitude Float?
  latitude Float?
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  DataPic DataPICFinal[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PelaporanPenggunaanBahanB3History {
  id                        String              @id @default(uuid())
  pelaporanPenggunaanBahanB3Id String           // Foreign key ke PelaporanPenggunaanBahanB3
  pelaporanPenggunaanBahanB3   PelaporanPenggunaanBahanB3 @relation(fields: [pelaporanPenggunaanBahanB3Id], references: [id])
  
  statusPengajuan             String            // Status pengajuan ("Menunggu Persetujuan", "Disetujui", "Ditolak")
  tanggalPengajuan            DateTime          // Tanggal ketika laporan diajukan
  tanggalPenyelesaian         DateTime?         // Tanggal ketika laporan disetujui atau ditolak
  catatanAdmin                String?           // Catatan atau alasan dari admin
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

model PelaporanBahanB3Distribusi{
  id String @id @default(uuid())
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  periodId String
  period Period @relation(fields: [periodId], references: [id])
  bulan Int
  tahun Int
  dataBahanB3Id String
  dataBahanB3 DataBahanB3 @relation(fields: [dataBahanB3Id], references: [id])
  jumlahB3Distribusi Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isDraft            Boolean    @default(true)
  isFinalized        Boolean    @default(false)
  isApproved         Boolean    @default(false)

  PelaporanBahanB3DistribusiHistory PelaporanBahanB3DistribusiHistory[]

  @@unique([companyId, dataBahanB3Id, bulan, tahun])
  DataCustomerOnPelaporanDistribusiBahanB3 DataCustomerOnPelaporanDistribusiBahanB3[]
  DataTransporterOnPelaporanDistribusiBahanB3 DataTransporterOnPelaporanDistribusiBahanB3[]
}

model DataCustomerOnPelaporanDistribusiBahanB3{
  id String @id @default(uuid())
  pelaporanBahanB3DistribusiId String
  pelaporanBahanB3Distribusi PelaporanBahanB3Distribusi @relation(fields: [pelaporanBahanB3DistribusiId], references: [id])
  dataCustomerId String
  dataCustomer DataCustomer @relation(fields: [dataCustomerId], references: [id])
}

model DataTransporterOnPelaporanDistribusiBahanB3{
  id String @id @default(uuid())
  pelaporanBahanB3DistribusiId String
  pelaporanBahanB3Distribusi PelaporanBahanB3Distribusi @relation(fields: [pelaporanBahanB3DistribusiId], references: [id])
  dataTransporterId String
  dataTransporter DataTransporter @relation(fields: [dataTransporterId], references: [id])
}

model PelaporanBahanB3DistribusiFinal {
  id String @id @default(uuid())
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  periodId String
  period Period @relation(fields: [periodId], references: [id])
  bulan Int
  tahun Int
  dataBahanB3Id String
  dataBahanB3 DataBahanB3 @relation(fields: [dataBahanB3Id], references: [id])
  jumlahB3Distribusi Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  approveAt DateTime @default(now())


  @@unique([dataBahanB3Id, bulan, tahun]) // Ensures each B3 substance is reported only once per month and year
  DataTransporterFinal DataTransporterFinal[]
  DataCustomerFinal DataCustomerFinal[]
}

model PelaporanBahanB3DistribusiHistory {
  id                        String              @id @default(uuid())
  pelaporanBahanB3DistribusiId String
  pelaporanBahanB3Distribusi PelaporanBahanB3Distribusi @relation(fields: [pelaporanBahanB3DistribusiId], references: [id])
  statusPengajuan             String            // Status pengajuan ("Menunggu Persetujuan", "Disetujui", "Ditolak")
  tanggalPengajuan            DateTime          // Tanggal ketika laporan diajukan
  tanggalPenyelesaian         DateTime?         // Tanggal ketika laporan disetujui atau ditolak
  catatanAdmin                String?           // Catatan atau alasan dari admin
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt
}

model DataTransporter {
  id String @id @default(uuid())
  namaTransPorter String
  alamat String
  email String
  telepon String
  fax String?
  longitude Float
  latitude Float
  companyId String
  company Company @relation(fields: [companyId], references: [id])
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])
  DataPic DataPIC[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DataTransporterOnPelaporanDistribusiBahanB3 DataTransporterOnPelaporanDistribusiBahanB3[]
}

model DataCustomerFinal {
  id String @id @default(uuid())
  pelaporanId String
  pelaporanBahanB3DistribusiFinal PelaporanBahanB3DistribusiFinal @relation(fields: [pelaporanId], references: [id])

  namaCustomer String
  alamat String
  email String
  telepon String
  fax String?
  longitude Float
  latitude Float
  companyId String
  provinceId String
  regencyId String
  districtId String
  villageId String
  createdAt DateTime @default(now())
}

model DataTransporterFinal {
  id String @id @default(uuid())
  pelaporanId String
  pelaporanBahanB3DistribusiFinal PelaporanBahanB3DistribusiFinal @relation(fields: [pelaporanId], references: [id])

  namaTransporter String
  alamat String
  email String
  telepon String
  fax String?
  longitude Float
  latitude Float
  companyId String
  provinceId String
  regencyId String
  districtId String
  villageId String
  createdAt DateTime @default(now())
}

model DataPerusahaanAsalMuatOnPengakutanDetail{
  id String @id @default(uuid())
  pengangkutanDetailId String
  pengangkutanDetail PengangkutanDetail @relation(fields: [pengangkutanDetailId], references: [id])
  perusahaanAsalMuatId String
  perusahaanAsalMuat PerusahaanAsalMuat @relation(fields: [perusahaanAsalMuatId], references: [id])
}

model DataPerusahaanTujuanBongkarOnPengakutanDetail{
  id String @id @default(uuid())
  pengangkutanDetailId String
  pengangkutanDetail PengangkutanDetail @relation(fields: [pengangkutanDetailId], references: [id])
  perusahaanTujuanBongkarId String
  perusahaanTujuanBongkar PerusahaanTujuanBongkar @relation(fields: [perusahaanTujuanBongkarId], references: [id])
}

model DataPerusahaanAsalMuatOnPengakutanDetailFinal{
  id String @id @default(uuid())
  pengangkutanDetailId String
  pengangkutanDetail LaporanPengangkutanFinalDetail @relation(fields: [pengangkutanDetailId], references: [id])
  companyId            String // Foreign key to Company
  company              Company            @relation(fields: [companyId], references: [id])
  namaPerusahaan       String // Name of the loading company
  alamat               String // Loading origin address
  latitude             Float // Loading origin latitude
  longitude            Float // Loading origin longitude
  locationType         String // Type of location: Gudang or Pelabuhan
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])

}

model DataPerusahaanTujuanBongkarOnPengakutanDetailFinal{
  id String @id @default(uuid())
  pengangkutanDetailId String
  pengangkutanDetail LaporanPengangkutanFinalDetail @relation(fields: [pengangkutanDetailId], references: [id])
   companyId            String // Foreign key to Company
  company              Company            @relation(fields: [companyId], references: [id])
  namaPerusahaan       String // Name of the loading company
  alamat               String // Loading origin address
  latitude             Float // Loading origin latitude
  longitude            Float // Loading origin longitude
  locationType         String // Type of location: Gudang or Pelabuhan
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  provinceId String
  province Province @relation(fields: [provinceId], references: [id])
  regencyId String
  regency Regencies @relation(fields: [regencyId], references: [id])
  districtId String
  district Districts @relation(fields: [districtId], references: [id])
  villageId String
  village Village @relation(fields: [villageId], references: [id])

}


model DataPICFinal {
  id String @id @default(uuid())
  namaPIC String?
  jabatan String?
  email String?
  telepon String?
  fax String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DataSupplierOnPelaporanPenggunaanB3Final DataSupplierOnPelaporanPenggunaanB3Final[]
}
