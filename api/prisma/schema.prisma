// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model CasbinRule {
  id    Int     @id @default(autoincrement())
  ptype String?
  v0    String?
  v1    String?
  v2    String?
  v3    String?
  v4    String?
  v5    String?

  @@index([ptype, v0, v1, v2, v3, v4, v5])
}

model UserRole {
  id     Int     @id @default(autoincrement())
  userId String // The user's ID
  role   String // The assigned role name
  scope  String? // The scope: specific userId or "*" for all
}

// Enum untuk menentukan tipe kategori
enum CategoryType {
  NEWS
  ARTICLE
  INFO
  DOCUMENT
  EVENT
  ATTACHMENT
}

enum Status {
  DRAFT
  PUBLISHED
  INACTIVE
  DELETED
}

model Category {
  id        String            @id @default(uuid())
  name      String
  slug      String            @unique
  type      CategoryType
  author    String
  status    Status            @default(DRAFT)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  news      News[]            @relation("NewsCategories")
  articles  Article[]         @relation("ArticleCategories")
  infos     Info[]            @relation("InfoCategories")
  documents CompanyDocument[] @relation("DocumentCategories")
  events    Event[]           @relation("EventCategories")

  @@unique([name, type]) // Composite unique constraint
}

model Photo {
  id         String           @id @default(uuid())
  url        String
  author     String
  status     Status           @default(DRAFT)
  news       News?            @relation(fields: [newsId], references: [id])
  newsId     String?
  article    Article?         @relation(fields: [articleId], references: [id])
  articleId  String?
  info       Info?            @relation(fields: [infoId], references: [id])
  infoId     String?
  document   CompanyDocument? @relation(fields: [documentId], references: [id])
  documentId String?
  event      Event?           @relation(fields: [eventId], references: [id])
  eventId    String?
  mercury        MercuryMonitoring? @relation(fields: [mercuryId], references: [id]) // New relation
  mercuryId      String?          // Foreign key for MercuryMonitoring
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
}

model News {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String?
  description String? // TinyMCE HTML content
  views       Int        @default(0)
  author      String
  status      Status     @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  categories  Category[] @relation("NewsCategories")
  photos      Photo[]
}

model Event {
  id        String    @id @default(uuid())
  title     String
  slug        String     @unique
  description String
  startDate DateTime
  endDate   DateTime
  latitude  Float
  longitude Float
  city      String?
  province  String?
  country   String?
  createdById String
  author    String
  status    Status @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories Category[] @relation("EventCategories")
  photos      Photo[]
  attachments Attachment[]
}

model Article {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String
  description String? // TinyMCE HTML content
  views       Int        @default(0)
  author      String
  status      Status     @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  categories  Category[] @relation("ArticleCategories")
  photos      Photo[]
}

model Info {
  id          String     @id @default(uuid())
  title       String
  createdById String
  slug        String     @unique
  description String?
  views       Int        @default(0)
  author      String
  status      Status     @default(DRAFT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("InfoCategories")
  photos      Photo[]
}

model CompanyDocument {
  id          String       @id @default(uuid())
  title       String
  slug        String       @unique
  documentUrl String
  description String? // TinyMCE HTML content
  author      String
  status      Status       @default(DRAFT)
  views       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById String
  categories  Category[]   @relation("DocumentCategories")
  photos      Photo[]
  attachments Attachment[]
}

model Attachment {
  id                String          @id @default(uuid())
  documentUrl       String // URL of the uploaded document
  documentPath      String // Path to the document in the filesystem
  companyDocument   CompanyDocument? @relation(fields: [companyDocumentId], references: [id])
  event             Event? @relation(fields: [eventId], references: [id])
  author            String
  status            Status          @default(DRAFT)
  companyDocumentId String?
  eventId           String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model SearchMetric {
  id          String   @id @default(uuid())
  userId      String?  // nullable if anonymous search
  keyword     String?  // search keyword
  categoryName String[]  // Category name instead of ID
  type        CategoryType  // NEWS, ARTICLE, EVENT, etc.
  timestamp   DateTime @default(now())
}

model ContentViewLog {
  id           String   @id @default(uuid())
  contentId    String   // ID of the content being viewed
  contentType  String   // Can be 'news', 'article', 'info', or 'companyDocument'
  viewedAt     DateTime @default(now())  // Timestamp when the content is viewed
}

model MercuryMonitoring {
  id                    String   @id @default(uuid())

  jenisSampelId          String?  // Foreign key for the sample type 'Jenis Sampel'
  jenisSampel            JenisSample? @relation("JenisSampelRelation", fields: [jenisSampelId], references: [id])

  bakuMutuLingkunganId   String?  // Foreign key for the sample type 'Baku Mutu Lingkungan'
  bakuMutuLingkungan     JenisSample? @relation("BakuMutuLingkunganRelation", fields: [bakuMutuLingkunganId], references: [id])

  tahunPengambilan       DateTime  // Sample collection date
  hasilKadar             String   @db.VarChar(10) // Mercury content result
  satuan                 String   @db.VarChar(10)
  tingkatKadar           String   @db.VarChar(50) // Mercury level compared to BML
  konsentrasi            String   @db.VarChar(50) // Mercury concentration

  peskLocationId         String?   @unique  // Ensure one-to-one relation with unique key
  peskLocation           Location? @relation("PeskLocation", fields: [peskLocationId], references: [id])

  warehouseLocationId    String?   @unique  // Ensure one-to-one relation with unique key
  warehouseLocation      Location? @relation("WarehouseLocation", fields: [warehouseLocationId], references: [id])

  photos                 Photo[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model JenisSample {
  id                      String   @id @default(uuid())
  code                    String
  deskripsi               String
  typeId                  String   // Foreign key to JenisSampel
  jenisSampelType        JenisSampleType @relation(fields: [typeId], references: [id])

  mercuryJenisSampel       MercuryMonitoring[] @relation("JenisSampelRelation")
  mercuryBakuMutuLingkungan MercuryMonitoring[] @relation("BakuMutuLingkunganRelation")

  @@unique([code, typeId])  // Ensure uniqueness for code and type combination
}
model Location {
  id              String   @id @default(uuid())
  latitude        Float
  longitude       Float
  description     String?  @db.VarChar(255)

  // Relations for the hierarchical structure
  provinceId      String?  // Foreign key to Province
  province        Province? @relation(fields: [provinceId], references: [id])

  regencyId       String?
  regency         Regencies? @relation(fields: [regencyId], references: [id])

  districtId      String?
  district        Districts? @relation(fields: [districtId], references: [id])

  villageId       String?
  village         Village? @relation(fields: [villageId], references: [id])

  mercuryPesk     MercuryMonitoring? @relation("PeskLocation")
  mercuryWarehouse MercuryMonitoring? @relation("WarehouseLocation")
}

model JenisSampleType {
  id          String   @id @default(uuid())
  type        String   @unique
  deskripsi   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  JenisSample JenisSample[]
}

model Province {
  id        String       @id @default(uuid()) @db.Char(2) // Province ID (2 characters)
  name      String       @db.VarChar(255) // Province name
  regencies Regencies[]  // Relation to regencies
  
  @@map("reg_provinces") // Maps to the existing table "reg_provinces"
  Location Location[]
}

model Regencies {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(255) // Regency name
  provinceId  String     @db.Char(250) // Foreign key to Province
  province    Province   @relation(fields: [provinceId], references: [id]) // Relation to Province
  districts   Districts[]  // Relation to villages
  
  @@map("reg_regencies") // Maps to the existing table "reg_regencies"
  Location Location[]
}

model Districts {
  id          String     @id @default(uuid())
  name        String     @db.VarChar(255) // Village name
  regencyId   String     @db.Char(250) // Foreign key to Regencies
  regency     Regencies  @relation(fields: [regencyId], references: [id]) // Relation to Regencies
  villages    Village[]  // Relation to villages


  @@map("reg_districts") // Maps to the existing table "req_districts"
  Location Location[]
}

model Village {
  id         String     @id @default(uuid())
  name       String     @db.VarChar(255) // Village name
  districtId  String     @db.Char(250) // Foreign key to Regencies
  district    Districts  @relation(fields: [districtId], references: [id]) // Relation to Regencies
  
  @@map("reg_village") // Maps to the existing table "reg_villages"
  Location Location[]
}

model Company {
  id                 String    @id @default(uuid())
  name               String
  penanggungJawab    String
  alamatKantor       String
  telpKantor         String
  faxKantor          String?    // Optional fax number
  emailKantor        String?    // Optional email address
  npwp               String?    // Optional NPWP (Tax ID)
  nomorInduk         String?    // Optional Nomor Induk (Registration Number)
  kodeDBKlh          String?    // Optional Kode DB KLH
  alamatPool         String[]   // Array of optional pool addresses
  bidangUsaha        String?    // Optional business sector
  vehicles           Vehicle[] // A company can have multiple vehicles (optional)
  surat              SuratRekomendasiB3[] // A company can have multiple SuratRekomendasiB3 (optional)
}

model Vehicle {
  id                 String    @id @default(uuid())
  noPolisi           String
  modelKendaraan     String
  tahunPembuatan     Int
  nomorRangka        String
  nomorMesin         String
  kepemilikan        String
  companyId          String
  company            Company   @relation(fields: [companyId], references: [id])
  surat              SuratOnVehicle[] // Many-to-many relation with SuratRekomendasiB3
}

model SuratRekomendasiB3 {
  id                        String    @id @default(uuid())
  tipe                      Int       // Tipe surat as integer (handled by application enum)
  kodePermohonanRekomendasi  String    // Kode permohonan rekomendasi
  nomorSurat                String    // Nomor surat
  status                    String    // Status surat ('PENDING', 'DRAFT', 'VALID', 'REJECTED')
  tanggalSurat            DateTime?  // Tanggal surat
  tanggalMulai              DateTime
  tanggalBerakhir           DateTime? // Optional end date
  companyId                 String    // Foreign key for Company
  company                   Company   @relation(fields: [companyId], references: [id])
  vehicles                  SuratOnVehicle[] // Many-to-many relation with Vehicle
}

model SuratOnVehicle {
  suratId    String
  vehicleId  String
  surat      SuratRekomendasiB3   @relation(fields: [suratId], references: [id])
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])

  @@id([suratId, vehicleId]) // Composite primary key for Surat and Vehicle relation
}

model DataBahanB3 {
  id            String @id @default(uuid())
  casNumber     String @db.Citext
  namaBahanKimia String 
  namaDagang    String @db.Citext
  tipeBahan     String  // Store enum as string
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([casNumber, namaDagang])  // Compound unique constraint
}


model DataPejabat {
  id      String @id @default(uuid())
  nip     String @unique @db.Citext  // Case-insensitive unique constraint
  nama    String
  jabatan String
  status  String  // Store enum as string
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model DataTembusan {
  id    String @id @default(uuid())
  nama  String @unique @db.Citext  // Case-insensitive unique constraint
  tipe  String  // Store enum as string
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  
}

